const{Client:Client,Collection:Collection,GatewayIntentBits:GatewayIntentBits}=require("discord.js"),client=new Client({partials:["MESSAGE","CHANNEL","REACTION"],intents:[GatewayIntentBits.Guilds,GatewayIntentBits.GuildMessages,GatewayIntentBits.MessageContent,GatewayIntentBits.GuildMembers]}),config=require("./config.json"),fs=require("fs"),yaml=require("js-yaml"),fileExists=require("file-exists");client.commands=new Collection;login();require("events").EventEmitter.defaultMaxListeners=0;async function login(){await client.login(config.token);return console.log(">Connexion...\n--------------")}const colors=yaml.load(fs.readFileSync(`./data/colors/colors.yml`,"utf8"));client.on("ready",(async function(){let upTime1=Math.round(process.uptime());const memoryUsedMb=process.memoryUsage().heapUsed/1024/1024;console.log("\n _   _   _____   _       _       _____  \n"+"| | | | | ____| | |     | |     /  _   \n"+"| |_| | | |__   | |     | |     | | | | \n"+"|  _  | |  __|  | |     | |     | | | | \n"+"| | | | | |___  | |___  | |___  | |_| | \n"+"|_| |_| |_____| |_____| |_____| _____/ \n");console.log(`-----------------------------------------------------------`+`\n[Démarré] ${new Date}`+`\n-----------------------------------------------------------`+`\n[INFO]Uptime ${upTime1}s\nUsed Memory : ${memoryUsedMb}`+`\n-----------------------------------------------------------`+`\n\n>>Le bot est pret pour servir ${client.guilds} serveur.`+`\n\nJe suis au courant de ??? canaux dans l'ensemble.`+`\nEt je suis le ${client.user.tag}.`+`\n\nCrée par ToniPortal`+`\n\n------------------------------------------------`);var yv=yaml.load(fs.readFileSync(`./data/version.yml`,"utf8"));yaml.load(fs.writeFileSync(`./data/version.yml`,`version: ${yv.version}\nverdem: ${Number(yv.verdem)+1}`,"utf8"))}));client.on("messageCreate",(message=>{if(message.author.id===client.user.id||message.author.bot||message.author.equals(client.user))return}));client.on("messageCreate",(async message=>{let profix=`*`;const args=message.content.trim().split(/ +/g);const command=args[0].slice(`*`.length).toLowerCase();if(args[0]!=="*help"&&args[0]!=="*testo"||args[0]=="*help"&&args[1]===undefined){fileExists(`./commande/${command}.js`).then((async exists=>{if(exists){let commandFile=require(`./commande/${command}.js`);try{commandFile.run(client,message,args,colors)}catch(error){console.error(error);const embed={color:16711680,author:{name:client.user.username,icon_url:client.user.avatarURL()},title:`**ERROR**`,description:"Quel dommage, GLaDOS n'a pas réussi à lancer votre commande !",timestamp:new Date,footer:{icon_url:client.user.avatarURL(),text:`©${client.user.tag}`}};message.channel.send({embeds:[embed]})}finally{console.log(`\n`)}}}))}else if(args[0]=="*help"&&args[1]!=undefined){const{help:help}=require(`./commande/${args[1]}`);const helpembed={color:16744703,author:{name:client.user.username,icon_url:client.user.avatarURL()},title:`Help !`,description:`Usage : _${profix}${args[1]}_ ${help.usage}\n${help.description}.`,timestamp:new Date,footer:{icon_url:client.user.avatarURL(),text:`©ToniPortal`}};message.channel.send({embeds:[helpembed]})}else if(args[0]=="*testo"){const commandNames=fs.readdirSync("./commande/");const results=[];async function runCommandsSequentially(){try{const channel=client.channels.cache.get("1179755824344731728");if(!channel){throw new Error(`Le canal n'a pas été trouvé.`)}for(const commandName of commandNames){try{if(commandName!="exit.js"&&commandName!="slashcommande"){const result=await channel.send(`*${commandName}`);let commandFile=require(`./commande/${commandName}`);let cmdResult=await commandFile.run(client,result,"",colors);await new Promise((resolve=>setTimeout(resolve,750)));console.log(`Commande ${commandName} exécutée avec succès.`);results.push({command:commandName,success:true,result:cmdResult})}}catch(error){console.error(`Erreur lors de l'exécution de la commande ${commandName}:`,error);results.push({command:commandName,success:false,error:error.message})}}const resultsJSON=JSON.stringify(results,null,2);fs.writeFileSync("./data/testcommande/commandResults.json",resultsJSON);console.log("Tests terminés. Résultats enregistrés dans commandResults.json.");message.channel.send("Tests terminés. Résultats enregistrés dans commandResults.json.")}catch(error){console.error("Erreur lors de l'éxécution du test de commande:",error);message.channel.send("Erreur lors de l'éxécution du test de commande")}}await runCommandsSequentially()}}));client.on("interactionCreate",(async interaction=>{if(!interaction.isCommand())return;let commandFile=require(`./commande/slashcommande/${interaction.commandName}.js`);commandFile.run(client,interaction)}));client.on("error",(e=>{console.log("Error:\n"+e)}));